import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:monitoring_guard_frontend/service/db_helper.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import 'package:flutter_dotenv/flutter_dotenv.dart';

class PatroliDalamLogic {
  Future<bool> submitPatroliDalam(
    BuildContext context,
    String bagian,
    String keterangan,
  ) async {
    if (bagian.isEmpty || keterangan.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
            content: Text("Bagian dan keterangan tidak boleh kosong")),
      );
      return false;
    }

    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? namaAnggota = prefs.getString('anggota_terpilih');
    String? idRiwayatString = prefs.getString('id_riwayat');
    int? idRiwayat = idRiwayatString != null
        ? int.tryParse(idRiwayatString)
        : prefs.getInt('id_riwayat');

    if (namaAnggota == null || idRiwayat == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Anggota atau ID Riwayat belum dipilih")),
      );
      return false;
    }

    // ‚úÖ Ganti format jam tanpa pakai context
    final now = DateTime.now();
    final formattedDate = now.toIso8601String().split('T')[0];
    final formattedTime =
        "${now.hour.toString().padLeft(2, '0')}:${now.minute.toString().padLeft(2, '0')}:00";

    final Map<String, dynamic> data = {
      "id_riwayat": idRiwayat,
      "nama_anggota": namaAnggota,
      "id_status": 3,
      "bagian": bagian,
      "keterangan_masalah": keterangan,
      "tanggal_selesai": formattedDate,
      "jam_selesai": formattedTime,
    };

    try {
      final url = Uri.parse(
          '${dotenv.env['BASE_URL']}/api/tugas_dalam/submit-patroli-dalam');
      print("üîÑ Mengirim data ke server: $data");

      final response = await http.post(
        url,
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode(data),
      );

      print("üì° Respon server statusCode: ${response.statusCode}");

      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text("Patroli dalam berhasil disimpan")),
        );
        return true;
      } else {
        print("‚ùå Gagal kirim ke server: ${response.body}");

        await DBHelper.insertDetailRiwayatDalam(data);

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
              content: Text("Gagal kirim online. Disimpan offline.")),
        );
        return true;
      }
    } catch (e) {
      print("‚ö†Ô∏è Exception saat kirim data: $e");

      await DBHelper.insertDetailRiwayatDalam(data);

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("Offline mode: Data disimpan lokal")),
      );
      return true;
    }
  }
}
